<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>tempHeroS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Clickable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level = -1;

hp = -1;
maxHp = -1;
mp = -1;
maxMp = -1;
flips = -1;
maxFlips = -1;
actions = -1;
maxActions = -1;
atq = -1;
maxAtq = -1;
disarmed = -1;
fatigue = -1;


doing = NOTHING;
casting = noone;
armour = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(phase){
    case PL_UPKEEP:
        if (flips == 0){
            phase_end();
        }
    break;
    case PL_MAIN:
        if (doing == NOTHING){
            casting = noone;
        }
        if (actions == 0){
            phase_end();
        }
    break;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(doing == NOTHING){
    skip_phase();
}
else if(doing == ATTACK or doing == CAST or doing == ACTIVATE){
    cancel();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cursorOn = instance_place(mouse_x, mouse_y, Clickable);
if(cursorOn != noone){
    switch(phase){
        case PL_UPKEEP:
            if(object_is_ancestor(cursorOn.object_index, Permanent)){
                if(flips &gt; 0 and cursorOn.status == FACEDOWN){
                    reveal(cursorOn);
                    flips--;
                }
            }
            else if(object_is_ancestor(cursorOn.object_index, Button)){
                skip_phase();
            }
        break;
        case PL_MAIN:
            if(object_is_ancestor(cursorOn.object_index, Permanent)) {
                if!(cursorOn.status == REVEALED or cursorOn.status == FACEDOWN) break;
                if(doing == NOTHING and actions &gt; 0){
                    if(cursorOn.type == SKILL){
                        if(cursorOn.maxTargets == 0){
                            with(cursorOn){
                                event_user(1);
                            }
                            actions--;
                            discard(cursorOn);
                        }
                        else{
                            doing = CAST;
                            casting = cursorOn;
                        }
                    }
                    else if(cursorOn.type == SPELL){
                        if(affordable(cursorOn)){
                            if(cursorOn.maxTargets == 0){
                                with(cursorOn){
                                    event_user(1);
                                }
                                afford(cursorOn);
                                actions--;
                                discard(cursorOn);
                            }
                            else{
                                doing = CAST;
                                casting = cursorOn;
                            }
                        }
                        else{
                            cancel();
                        }
                    }
                }
                else if(doing == CAST){
                    if(isValid(casting, cursorOn)){
                        var wellCast = false;
                        with(casting){
                            target[targetCount] = cursorOn;
                            targetCount++;
                            if(targetCount == maxTargets){
                                event_user(1);
                                wellCast = true;
                            }
                        }
                        if(wellCast) {
                            if(casting.type == SPELL) afford(casting);
                            discard(casting);
                            casting = noone;
                            actions--;
                        }
                    }
                    else{
                        cancel();
                    }
                }
                else if(doing == ATTACK){
                    if(cursorOn.incorporeal) cancel();
                    hero_attack(cursorOn);
                    actions--;
                }
            }
            else if(cursorOn == id){
                if(doing != NOTHING or disarmed != 0) cancel();
                doing = ATTACK;
            }
            else if(object_is_ancestor(cursorOn.object_index, Button)){
                skip_phase();
            }
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
